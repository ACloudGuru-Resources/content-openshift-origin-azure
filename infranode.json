{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {},
  "variables": {
    "apiVersion": "2015-06-15",
    "sshKeyPath": "[concat('/home/',variables('adminUsername'),'/.ssh/authorized_keys')]",
    "storageAccountName": "[toLower( concat(variables('vmName'), uniqueString(resourceGroup().id) ))]",
    "baseTemplateUrl": "https://raw.githubusercontent.com/linuxacademy/content-openshift-origin-azure/master/",
    "baseVMachineTemplateUriInfranode": "[concat(variables('baseTemplateUrl'), 'infranode.json')]",
    "baseVMachineTemplateUriNode": "[concat(variables('baseTemplateUrl'), 'node.json')]",
    "baseVMachineTemplateUriMaster": "[concat(variables('baseTemplateUrl'), 'master.json')]",
    "baseVMachineTemplateUriJumpBox": "[concat(variables('baseTemplateUrl'), 'jumpbox.json')]",
    "adminUsername": "azureuser",
    "adminPassword": "ChangeMe123!",
    "sshKeyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiUArYdiOpKBDZJbEdsaNt5MhpxQijUQs0Z/eO70B1uR0qGhps3mk9Q4SVUtVNkrZMqOAKNTBZf31YzkSccWIEt3ajlxtTrZrLrA8qABCBWrv50O4SRUblIwBilb69NLWH9oPYN6pzDXzh702ENYk0a/kbyYoZhPZaBv34edMDTu6XFK1KRx5xeord88zwh+lf+oO/ZIWYtxoYErb7Fomfu/e0afsqMGxCt9G97fSw9HgvQ0lN4MR66sSIhkcMfvY3b8SqS/YqFPciqfOD1nyXFtoxv4A1Pjua+9zhDEyL/yiXYSPfnLwvypPI/DoM6syrz1VAGmuealw8IKzTdUcP",
    "masterDnsName": "",
    "numberOfMasterNodes": 1,
    "vmName": "infraVM",
    "masterVMSize": "Standard_B1ms",
    "masterVMstorType": "Standard_LRS",
    "numberOfinfrasndes": 1,
    "infranodeVMSize": "Standard_B1ms",
    "infranodeVMstorType": "Standard_LRS",
    "numberOfNodes": 1,
    "nodeVMSize": "Standard_B1ms",
    "nodeVMstorType": "Standard_LRS",
    "jumpVMSize": "Standard_B1ms",
    "jumpVMstorType": "Standard_LRS",
    "image": "centos",
    "location": "[resourceGroup().location]",
    "virtualNetworkName": "openshiftVnet",
    "addressPrefix": "10.41.0.0/16",
    "infranodesubnetName": "infranodeSubnet",
    "infranodeSubnetNSGName": "infraSubnetNSG",
    "infranodesubnetPrefix": "10.41.2.0/24",
    "infrapipname": "infraPip",
    "infrapipaddresstype": "Static",
    "infralbName": "infraLB",
    "infralbid": "[resourceId('Microsoft.Network/loadBalancers', variables('infralbName'))]",
    "infraASName": "infraAS",
    "jumpnodesubnetName": "jumpBoxSubnet",
    "jumpnodesubnetNameNSG": "jumpBoxSubnetNSG",
    "jumpnodesubnetPrefix": "10.41.3.0/24",
    "nodesubnetName": "nodeSubnet",
    "nodesubnetPrefix": "10.41.1.0/24",
    "mastersubnetName": "masterSubnet",
    "mastersubnetNSGName": "masterSubnetNSG",
    "mastersubnetPrefix": "10.41.0.0/24",
    "masterpipname": "masterPip",
    "masterppipaddresstype": "Dynamic",
    "masterlbName": "masterLB",
    "masterlbid": "[resourceId('Microsoft.Network/loadBalancers', variables('masterlbName'))]",
    "masterASName": "masterAS",
    "apiVersion": "2015-06-15",
    "infranodeStorageName": "[concat(uniqueString(resourceGroup().id), 'infranodesa')]",
    "nodeStorageName": "[concat(uniqueString(resourceGroup().id), 'nodesa')]",
    "masterStorageName": "[concat(uniqueString(resourceGroup().id), 'mastersa')]",
    "vhdStorageType": "Standard_LRS",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "infranodeSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('infranodesubnetName'))]",
    "nodeSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('nodesubnetName'))]",
    "jumpboxSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('jumpnodesubnetName'))]",
    "nodesASName": "nodesAS",
    "masterSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('mastersubnetName'))]",
    "centos": {
      "publisher": "Openlogic",
      "offer": "CentOS",
      "sku": "7.2",
      "version": "latest"
    },
    "rhel": {
      "publisher": "RedHat",
      "offer": "RHEL",
      "sku": "7.2",
      "version": "latest"
    } 
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "properties": {},
      "sku": {
        "name": "[variables('vhdStorageType')]"
      },
      "kind": "Storage"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmName'), 'nic')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('BackEndAddressPool')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachine"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', concat(variables('vmName'), 'nic'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[variables('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[variables('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'openshiftvmachines/', variables('vmName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "128",
              "lun": 0,
              "name": "datadisk1",
              "vhd": {
                "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'openshiftvmachines/', variables('vmName'), '_datadisk1.vhd')]"
              }
            }
          ]
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('ASName'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmName'), 'nic'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/installcustomscript')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachineCustomScriptExtension"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [ "[concat(variables('baseTemplateUrl'), 'node.sh')]" ],
          "commandToExecute": "sh node.sh"
        }
      }
    }
  ],
  "outputs": {
  }
}
